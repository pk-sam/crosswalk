#!/usr/bin/env python

# Copyright (c) 2014 Intel Corporation. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""
Parses a gyp JSON dependency dict generated by gyp's dump_dependency_json
generator and prints the Chromium targets (ie. the ones not in gyp files in
src/xwalk) required for building the ones passed on the command-line.

The output can then be passed, for example, to ninja.
"""

import copy
import json
import os
import sys


def ParseDependency(dep):
  """
  Given a dependency like '/path/to/foo.gyp:somedep#target', returns a tuple
  ('/path/to/foo.gyp', 'somedep').
  """
  path = dep[:dep.find(':')]
  name = dep[dep.find(':')+1:dep.find('#')]
  return (path, name)


def GetDependencies(deps_dict, root):
  targets = set()
  dependencies = copy.deepcopy(deps_dict[root])
  while dependencies:
    dep = dependencies.pop()
    target_path, target_name = ParseDependency(dep)
    if target_name in targets:
      continue
    if not target_path.startswith('src/xwalk/'):
      targets.add(target_name)
    dependencies += deps_dict[dep]
  return targets


def main():
  if len(sys.argv) < 3:
    print('Usage: %s <deps.json> <target 1> [... <target N>]' % sys.argv[0])
    print('<deps.json> points to deps.json generated by gyp with '
          'GYP_GENERATORS=dump_dependency_json.')
    print('Eeach target is a target name whose dependencies will be '
          'printed.')
    return 1

  dump_json_path = sys.argv[1]
  if not os.path.isfile(dump_json_path):
    print('"%s" not found.' % dump_json_path)
    print('Run gyp with GYP_GENERATORS=dump_dependency_json first.')
    return 1

  deps_dict = json.load(open(dump_json_path))
  targets = sys.argv[2:]
  roots = []

  for target in targets:
    valid_target = False
    for dep in deps_dict:
      if dep.endswith(':%s#target' % target):
        valid_target = True
        roots.append(dep)
        break
    if not valid_target:
      print('Error: "%s" is not a valid target.' % target)
      return 1

  target_deps = set()
  for dependency in roots:
    target_deps |= GetDependencies(deps_dict, dependency)

  print ' '.join(list(target_deps))
  return 0


if __name__ == '__main__':
  sys.exit(main())
